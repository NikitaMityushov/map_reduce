// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.3
// source: mr_rpc_v1.proto

package mr_rpc_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapReduceClient is the client API for MapReduce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapReduceClient interface {
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
}

type mapReduceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapReduceClient(cc grpc.ClientConnInterface) MapReduceClient {
	return &mapReduceClient{cc}
}

func (c *mapReduceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/mr_rpc.MapReduce/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapReduceServer is the server API for MapReduce service.
// All implementations must embed UnimplementedMapReduceServer
// for forward compatibility
type MapReduceServer interface {
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	mustEmbedUnimplementedMapReduceServer()
}

// UnimplementedMapReduceServer must be embedded to have forward compatible implementations.
type UnimplementedMapReduceServer struct {
}

func (UnimplementedMapReduceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedMapReduceServer) mustEmbedUnimplementedMapReduceServer() {}

// UnsafeMapReduceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapReduceServer will
// result in compilation errors.
type UnsafeMapReduceServer interface {
	mustEmbedUnimplementedMapReduceServer()
}

func RegisterMapReduceServer(s grpc.ServiceRegistrar, srv MapReduceServer) {
	s.RegisterService(&MapReduce_ServiceDesc, srv)
}

func _MapReduce_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mr_rpc.MapReduce/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapReduce_ServiceDesc is the grpc.ServiceDesc for MapReduce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapReduce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mr_rpc.MapReduce",
	HandlerType: (*MapReduceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _MapReduce_GetTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mr_rpc_v1.proto",
}
